name: Build and Deploy Availability Agent

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './app'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/AvailabilityAgent

    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/AvailabilityAgent

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal
      working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/AvailabilityAgent
      continue-on-error: true

    - name: Publish
      run: dotnet publish --configuration Release --output ./publish
      working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/AvailabilityAgent

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: function-app
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/AvailabilityAgent/publish

  build-container:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.ACR_LOGIN_SERVER }}/availabilityagent
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        file: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/availabilityagent:buildcache
        cache-to: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/availabilityagent:buildcache,mode=max

    - name: Output image tags
      run: |
        echo "Image tags: ${{ steps.meta.outputs.tags }}"

  terraform-plan:
    runs-on: ubuntu-latest
    needs: build-container
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./infra
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./infra
      continue-on-error: true

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infra
      env:
        TF_VAR_container_image: ${{ secrets.ACR_LOGIN_SERVER }}/availabilityagent:${{ github.sha }}

    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
      working-directory: ./infra

    - name: Output deployment info
      run: |
        echo "Function App Name: ${{ steps.terraform-outputs.outputs.function_app_name }}"
        echo "Resource Group: ${{ steps.terraform-outputs.outputs.resource_group_name }}"

  deploy-function-app:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Get Function App Name
      id: get-function-app
      run: |
        echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
      working-directory: ./infra

    - name: Update Function App Container
      run: |
        az functionapp config container set \
          --name ${{ steps.get-function-app.outputs.function_app_name }} \
          --resource-group ${{ steps.get-function-app.outputs.resource_group_name }} \
          --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/availabilityagent:${{ github.sha }}

    - name: Restart Function App
      run: |
        az functionapp restart \
          --name ${{ steps.get-function-app.outputs.function_app_name }} \
          --resource-group ${{ steps.get-function-app.outputs.resource_group_name }}

    - name: Wait for Function App to be ready
      run: sleep 30

    - name: Verify deployment
      run: |
        az functionapp show \
          --name ${{ steps.get-function-app.outputs.function_app_name }} \
          --resource-group ${{ steps.get-function-app.outputs.resource_group_name }} \
          --query "state" \
          --output tsv
